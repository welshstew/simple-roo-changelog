// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.swinchester.roo.quickstarts.changelog.web;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;
import org.swinchester.roo.quickstarts.changelog.Person;
import org.swinchester.roo.quickstarts.changelog.PersonRepository;
import org.swinchester.roo.quickstarts.changelog.web.PersonBean;
import org.swinchester.roo.quickstarts.changelog.web.util.MessageFactory;

privileged aspect PersonBean_Roo_ManagedBean {
    
    declare @type: PersonBean: @ManagedBean(name = "personBean");
    
    declare @type: PersonBean: @SessionScoped;
    
    @Autowired
    PersonRepository PersonBean.personRepository;
    
    private String PersonBean.name = "People";
    
    private Person PersonBean.person;
    
    private List<Person> PersonBean.allPeople;
    
    private boolean PersonBean.dataVisible = false;
    
    private List<String> PersonBean.columns;
    
    private HtmlPanelGrid PersonBean.createPanelGrid;
    
    private HtmlPanelGrid PersonBean.editPanelGrid;
    
    private HtmlPanelGrid PersonBean.viewPanelGrid;
    
    private boolean PersonBean.createDialogVisible = false;
    
    @PostConstruct
    public void PersonBean.init() {
        columns = new ArrayList<String>();
        columns.add("personIdentifier");
        columns.add("givenName");
        columns.add("familyName");
        columns.add("gender");
        columns.add("address");
    }
    
    public String PersonBean.getName() {
        return name;
    }
    
    public List<String> PersonBean.getColumns() {
        return columns;
    }
    
    public List<Person> PersonBean.getAllPeople() {
        return allPeople;
    }
    
    public void PersonBean.setAllPeople(List<Person> allPeople) {
        this.allPeople = allPeople;
    }
    
    public String PersonBean.findAllPeople() {
        allPeople = personRepository.findAll();
        dataVisible = !allPeople.isEmpty();
        return null;
    }
    
    public boolean PersonBean.isDataVisible() {
        return dataVisible;
    }
    
    public void PersonBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PersonBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PersonBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PersonBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PersonBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel personIdentifierCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        personIdentifierCreateOutput.setFor("personIdentifierCreateInput");
        personIdentifierCreateOutput.setId("personIdentifierCreateOutput");
        personIdentifierCreateOutput.setValue("Person Identifier:");
        htmlPanelGrid.getChildren().add(personIdentifierCreateOutput);
        
        InputText personIdentifierCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        personIdentifierCreateInput.setId("personIdentifierCreateInput");
        personIdentifierCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.personIdentifier}", String.class));
        personIdentifierCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(personIdentifierCreateInput);
        
        Message personIdentifierCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        personIdentifierCreateInputMessage.setId("personIdentifierCreateInputMessage");
        personIdentifierCreateInputMessage.setFor("personIdentifierCreateInput");
        personIdentifierCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(personIdentifierCreateInputMessage);
        
        OutputLabel givenNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        givenNameCreateOutput.setFor("givenNameCreateInput");
        givenNameCreateOutput.setId("givenNameCreateOutput");
        givenNameCreateOutput.setValue("Given Name:");
        htmlPanelGrid.getChildren().add(givenNameCreateOutput);
        
        InputText givenNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        givenNameCreateInput.setId("givenNameCreateInput");
        givenNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.givenName}", String.class));
        givenNameCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(givenNameCreateInput);
        
        Message givenNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        givenNameCreateInputMessage.setId("givenNameCreateInputMessage");
        givenNameCreateInputMessage.setFor("givenNameCreateInput");
        givenNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(givenNameCreateInputMessage);
        
        OutputLabel familyNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        familyNameCreateOutput.setFor("familyNameCreateInput");
        familyNameCreateOutput.setId("familyNameCreateOutput");
        familyNameCreateOutput.setValue("Family Name:");
        htmlPanelGrid.getChildren().add(familyNameCreateOutput);
        
        InputText familyNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        familyNameCreateInput.setId("familyNameCreateInput");
        familyNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.familyName}", String.class));
        familyNameCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(familyNameCreateInput);
        
        Message familyNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        familyNameCreateInputMessage.setId("familyNameCreateInputMessage");
        familyNameCreateInputMessage.setFor("familyNameCreateInput");
        familyNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(familyNameCreateInputMessage);
        
        OutputLabel genderCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        genderCreateOutput.setFor("genderCreateInput");
        genderCreateOutput.setId("genderCreateOutput");
        genderCreateOutput.setValue("Gender:");
        htmlPanelGrid.getChildren().add(genderCreateOutput);
        
        InputText genderCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        genderCreateInput.setId("genderCreateInput");
        genderCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.gender}", String.class));
        genderCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(genderCreateInput);
        
        Message genderCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        genderCreateInputMessage.setId("genderCreateInputMessage");
        genderCreateInputMessage.setFor("genderCreateInput");
        genderCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(genderCreateInputMessage);
        
        OutputLabel addressCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addressCreateOutput.setFor("addressCreateInput");
        addressCreateOutput.setId("addressCreateOutput");
        addressCreateOutput.setValue("Address:");
        htmlPanelGrid.getChildren().add(addressCreateOutput);
        
        InputText addressCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        addressCreateInput.setId("addressCreateInput");
        addressCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.address}", String.class));
        addressCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(addressCreateInput);
        
        Message addressCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressCreateInputMessage.setId("addressCreateInputMessage");
        addressCreateInputMessage.setFor("addressCreateInput");
        addressCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressCreateInputMessage);
        
        OutputLabel cityCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        cityCreateOutput.setFor("cityCreateInput");
        cityCreateOutput.setId("cityCreateOutput");
        cityCreateOutput.setValue("City:");
        htmlPanelGrid.getChildren().add(cityCreateOutput);
        
        InputText cityCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        cityCreateInput.setId("cityCreateInput");
        cityCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.city}", String.class));
        cityCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(cityCreateInput);
        
        Message cityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        cityCreateInputMessage.setId("cityCreateInputMessage");
        cityCreateInputMessage.setFor("cityCreateInput");
        cityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(cityCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel personIdentifierEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        personIdentifierEditOutput.setFor("personIdentifierEditInput");
        personIdentifierEditOutput.setId("personIdentifierEditOutput");
        personIdentifierEditOutput.setValue("Person Identifier:");
        htmlPanelGrid.getChildren().add(personIdentifierEditOutput);
        
        InputText personIdentifierEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        personIdentifierEditInput.setId("personIdentifierEditInput");
        personIdentifierEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.personIdentifier}", String.class));
        personIdentifierEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(personIdentifierEditInput);
        
        Message personIdentifierEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        personIdentifierEditInputMessage.setId("personIdentifierEditInputMessage");
        personIdentifierEditInputMessage.setFor("personIdentifierEditInput");
        personIdentifierEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(personIdentifierEditInputMessage);
        
        OutputLabel givenNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        givenNameEditOutput.setFor("givenNameEditInput");
        givenNameEditOutput.setId("givenNameEditOutput");
        givenNameEditOutput.setValue("Given Name:");
        htmlPanelGrid.getChildren().add(givenNameEditOutput);
        
        InputText givenNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        givenNameEditInput.setId("givenNameEditInput");
        givenNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.givenName}", String.class));
        givenNameEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(givenNameEditInput);
        
        Message givenNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        givenNameEditInputMessage.setId("givenNameEditInputMessage");
        givenNameEditInputMessage.setFor("givenNameEditInput");
        givenNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(givenNameEditInputMessage);
        
        OutputLabel familyNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        familyNameEditOutput.setFor("familyNameEditInput");
        familyNameEditOutput.setId("familyNameEditOutput");
        familyNameEditOutput.setValue("Family Name:");
        htmlPanelGrid.getChildren().add(familyNameEditOutput);
        
        InputText familyNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        familyNameEditInput.setId("familyNameEditInput");
        familyNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.familyName}", String.class));
        familyNameEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(familyNameEditInput);
        
        Message familyNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        familyNameEditInputMessage.setId("familyNameEditInputMessage");
        familyNameEditInputMessage.setFor("familyNameEditInput");
        familyNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(familyNameEditInputMessage);
        
        OutputLabel genderEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        genderEditOutput.setFor("genderEditInput");
        genderEditOutput.setId("genderEditOutput");
        genderEditOutput.setValue("Gender:");
        htmlPanelGrid.getChildren().add(genderEditOutput);
        
        InputText genderEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        genderEditInput.setId("genderEditInput");
        genderEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.gender}", String.class));
        genderEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(genderEditInput);
        
        Message genderEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        genderEditInputMessage.setId("genderEditInputMessage");
        genderEditInputMessage.setFor("genderEditInput");
        genderEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(genderEditInputMessage);
        
        OutputLabel addressEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addressEditOutput.setFor("addressEditInput");
        addressEditOutput.setId("addressEditOutput");
        addressEditOutput.setValue("Address:");
        htmlPanelGrid.getChildren().add(addressEditOutput);
        
        InputText addressEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        addressEditInput.setId("addressEditInput");
        addressEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.address}", String.class));
        addressEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(addressEditInput);
        
        Message addressEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressEditInputMessage.setId("addressEditInputMessage");
        addressEditInputMessage.setFor("addressEditInput");
        addressEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressEditInputMessage);
        
        OutputLabel cityEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        cityEditOutput.setFor("cityEditInput");
        cityEditOutput.setId("cityEditOutput");
        cityEditOutput.setValue("City:");
        htmlPanelGrid.getChildren().add(cityEditOutput);
        
        InputText cityEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        cityEditInput.setId("cityEditInput");
        cityEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.city}", String.class));
        cityEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(cityEditInput);
        
        Message cityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        cityEditInputMessage.setId("cityEditInputMessage");
        cityEditInputMessage.setFor("cityEditInput");
        cityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(cityEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText personIdentifierLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        personIdentifierLabel.setId("personIdentifierLabel");
        personIdentifierLabel.setValue("Person Identifier:");
        htmlPanelGrid.getChildren().add(personIdentifierLabel);
        
        HtmlOutputText personIdentifierValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        personIdentifierValue.setId("personIdentifierValue");
        personIdentifierValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.personIdentifier}", String.class));
        htmlPanelGrid.getChildren().add(personIdentifierValue);
        
        HtmlOutputText givenNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        givenNameLabel.setId("givenNameLabel");
        givenNameLabel.setValue("Given Name:");
        htmlPanelGrid.getChildren().add(givenNameLabel);
        
        HtmlOutputText givenNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        givenNameValue.setId("givenNameValue");
        givenNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.givenName}", String.class));
        htmlPanelGrid.getChildren().add(givenNameValue);
        
        HtmlOutputText familyNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        familyNameLabel.setId("familyNameLabel");
        familyNameLabel.setValue("Family Name:");
        htmlPanelGrid.getChildren().add(familyNameLabel);
        
        HtmlOutputText familyNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        familyNameValue.setId("familyNameValue");
        familyNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.familyName}", String.class));
        htmlPanelGrid.getChildren().add(familyNameValue);
        
        HtmlOutputText genderLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        genderLabel.setId("genderLabel");
        genderLabel.setValue("Gender:");
        htmlPanelGrid.getChildren().add(genderLabel);
        
        HtmlOutputText genderValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        genderValue.setId("genderValue");
        genderValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.gender}", String.class));
        htmlPanelGrid.getChildren().add(genderValue);
        
        HtmlOutputText addressLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressLabel.setId("addressLabel");
        addressLabel.setValue("Address:");
        htmlPanelGrid.getChildren().add(addressLabel);
        
        HtmlOutputText addressValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressValue.setId("addressValue");
        addressValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.address}", String.class));
        htmlPanelGrid.getChildren().add(addressValue);
        
        HtmlOutputText cityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        cityLabel.setId("cityLabel");
        cityLabel.setValue("City:");
        htmlPanelGrid.getChildren().add(cityLabel);
        
        HtmlOutputText cityValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        cityValue.setId("cityValue");
        cityValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.city}", String.class));
        htmlPanelGrid.getChildren().add(cityValue);
        
        return htmlPanelGrid;
    }
    
    public Person PersonBean.getPerson() {
        if (person == null) {
            person = new Person();
        }
        return person;
    }
    
    public void PersonBean.setPerson(Person person) {
        this.person = person;
    }
    
    public String PersonBean.onEdit() {
        return null;
    }
    
    public boolean PersonBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PersonBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PersonBean.displayList() {
        createDialogVisible = false;
        findAllPeople();
        return "person";
    }
    
    public String PersonBean.displayCreateDialog() {
        person = new Person();
        createDialogVisible = true;
        return "person";
    }
    
    public String PersonBean.persist() {
        String message = "";
        if (person.getId() != null) {
            personRepository.save(person);
            message = "message_successfully_updated";
        } else {
            personRepository.save(person);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Person");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPeople();
    }
    
    public String PersonBean.delete() {
        personRepository.delete(person);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Person");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPeople();
    }
    
    public void PersonBean.reset() {
        person = null;
        createDialogVisible = false;
    }
    
    public void PersonBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
