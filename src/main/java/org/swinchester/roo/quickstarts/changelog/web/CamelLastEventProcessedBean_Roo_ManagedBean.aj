// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.swinchester.roo.quickstarts.changelog.web;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;
import org.swinchester.roo.quickstarts.changelog.CamelLastEventProcessed;
import org.swinchester.roo.quickstarts.changelog.CamelLastEventProcessedRepository;
import org.swinchester.roo.quickstarts.changelog.web.CamelLastEventProcessedBean;
import org.swinchester.roo.quickstarts.changelog.web.util.MessageFactory;

privileged aspect CamelLastEventProcessedBean_Roo_ManagedBean {
    
    declare @type: CamelLastEventProcessedBean: @ManagedBean(name = "camelLastEventProcessedBean");
    
    declare @type: CamelLastEventProcessedBean: @SessionScoped;
    
    @Autowired
    CamelLastEventProcessedRepository CamelLastEventProcessedBean.camelLastEventProcessedRepository;
    
    private String CamelLastEventProcessedBean.name = "CamelLastEventProcesseds";
    
    private CamelLastEventProcessed CamelLastEventProcessedBean.camelLastEventProcessed;
    
    private List<CamelLastEventProcessed> CamelLastEventProcessedBean.allCamelLastEventProcesseds;
    
    private boolean CamelLastEventProcessedBean.dataVisible = false;
    
    private List<String> CamelLastEventProcessedBean.columns;
    
    private HtmlPanelGrid CamelLastEventProcessedBean.createPanelGrid;
    
    private HtmlPanelGrid CamelLastEventProcessedBean.editPanelGrid;
    
    private HtmlPanelGrid CamelLastEventProcessedBean.viewPanelGrid;
    
    private boolean CamelLastEventProcessedBean.createDialogVisible = false;
    
    @PostConstruct
    public void CamelLastEventProcessedBean.init() {
        columns = new ArrayList<String>();
        columns.add("eventId");
    }
    
    public String CamelLastEventProcessedBean.getName() {
        return name;
    }
    
    public List<String> CamelLastEventProcessedBean.getColumns() {
        return columns;
    }
    
    public List<CamelLastEventProcessed> CamelLastEventProcessedBean.getAllCamelLastEventProcesseds() {
        return allCamelLastEventProcesseds;
    }
    
    public void CamelLastEventProcessedBean.setAllCamelLastEventProcesseds(List<CamelLastEventProcessed> allCamelLastEventProcesseds) {
        this.allCamelLastEventProcesseds = allCamelLastEventProcesseds;
    }
    
    public String CamelLastEventProcessedBean.findAllCamelLastEventProcesseds() {
        allCamelLastEventProcesseds = camelLastEventProcessedRepository.findAll();
        dataVisible = !allCamelLastEventProcesseds.isEmpty();
        return null;
    }
    
    public boolean CamelLastEventProcessedBean.isDataVisible() {
        return dataVisible;
    }
    
    public void CamelLastEventProcessedBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid CamelLastEventProcessedBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void CamelLastEventProcessedBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid CamelLastEventProcessedBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void CamelLastEventProcessedBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid CamelLastEventProcessedBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void CamelLastEventProcessedBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid CamelLastEventProcessedBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel eventIdCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        eventIdCreateOutput.setFor("eventIdCreateInput");
        eventIdCreateOutput.setId("eventIdCreateOutput");
        eventIdCreateOutput.setValue("Event Id:");
        htmlPanelGrid.getChildren().add(eventIdCreateOutput);
        
        Spinner eventIdCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        eventIdCreateInput.setId("eventIdCreateInput");
        eventIdCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{camelLastEventProcessedBean.camelLastEventProcessed.eventId}", Long.class));
        eventIdCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(eventIdCreateInput);
        
        Message eventIdCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        eventIdCreateInputMessage.setId("eventIdCreateInputMessage");
        eventIdCreateInputMessage.setFor("eventIdCreateInput");
        eventIdCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(eventIdCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CamelLastEventProcessedBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel eventIdEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        eventIdEditOutput.setFor("eventIdEditInput");
        eventIdEditOutput.setId("eventIdEditOutput");
        eventIdEditOutput.setValue("Event Id:");
        htmlPanelGrid.getChildren().add(eventIdEditOutput);
        
        Spinner eventIdEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        eventIdEditInput.setId("eventIdEditInput");
        eventIdEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{camelLastEventProcessedBean.camelLastEventProcessed.eventId}", Long.class));
        eventIdEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(eventIdEditInput);
        
        Message eventIdEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        eventIdEditInputMessage.setId("eventIdEditInputMessage");
        eventIdEditInputMessage.setFor("eventIdEditInput");
        eventIdEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(eventIdEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CamelLastEventProcessedBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText eventIdLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        eventIdLabel.setId("eventIdLabel");
        eventIdLabel.setValue("Event Id:");
        htmlPanelGrid.getChildren().add(eventIdLabel);
        
        HtmlOutputText eventIdValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        eventIdValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{camelLastEventProcessedBean.camelLastEventProcessed.eventId}", String.class));
        htmlPanelGrid.getChildren().add(eventIdValue);
        
        return htmlPanelGrid;
    }
    
    public CamelLastEventProcessed CamelLastEventProcessedBean.getCamelLastEventProcessed() {
        if (camelLastEventProcessed == null) {
            camelLastEventProcessed = new CamelLastEventProcessed();
        }
        return camelLastEventProcessed;
    }
    
    public void CamelLastEventProcessedBean.setCamelLastEventProcessed(CamelLastEventProcessed camelLastEventProcessed) {
        this.camelLastEventProcessed = camelLastEventProcessed;
    }
    
    public String CamelLastEventProcessedBean.onEdit() {
        return null;
    }
    
    public boolean CamelLastEventProcessedBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void CamelLastEventProcessedBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String CamelLastEventProcessedBean.displayList() {
        createDialogVisible = false;
        findAllCamelLastEventProcesseds();
        return "camelLastEventProcessed";
    }
    
    public String CamelLastEventProcessedBean.displayCreateDialog() {
        camelLastEventProcessed = new CamelLastEventProcessed();
        createDialogVisible = true;
        return "camelLastEventProcessed";
    }
    
    public String CamelLastEventProcessedBean.persist() {
        String message = "";
        if (camelLastEventProcessed.getId() != null) {
            camelLastEventProcessedRepository.save(camelLastEventProcessed);
            message = "message_successfully_updated";
        } else {
            camelLastEventProcessedRepository.save(camelLastEventProcessed);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "CamelLastEventProcessed");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCamelLastEventProcesseds();
    }
    
    public String CamelLastEventProcessedBean.delete() {
        camelLastEventProcessedRepository.delete(camelLastEventProcessed);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "CamelLastEventProcessed");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCamelLastEventProcesseds();
    }
    
    public void CamelLastEventProcessedBean.reset() {
        camelLastEventProcessed = null;
        createDialogVisible = false;
    }
    
    public void CamelLastEventProcessedBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
